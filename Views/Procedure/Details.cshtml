@model Website.Models.procedure
@using Website.HTMLHelper
@{
    ViewBag.Title = "Details";
}

<h3>Details</h3>

@*Use for Ajax anti forgery token*@
@Html.AntiForgeryToken()


<div>
    <h4>Information</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt style="inline-size:fit-content">
            Medical Term
        </dt>

        <dd>
            @Html.DisplayFor(model => model.LongName)
        </dd>

        <dt style="inline-size:fit-content">
            Medical Term (Short-form)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.ShortName)
        </dd>

        <dt style="inline-size:fit-content">
            Video Source
        </dt>

        <dd>
            @Html.DisplayFor(model => model.VideoSource)
        </dd>

        <dt style="inline-size:fit-content">
            @Html.DisplayNameFor(model => model.Description)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Description)
        </dd>

    </dl>
</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.ProcedureID }) |
    @Html.ActionLink("Back to List", "Index")
</p>

@*STEPS*@
<fieldset>
    <legend>Steps</legend>
    <table class="table" id="stepsTable">
        <thead>
            <tr>
                <th>
                    Number
                </th>
                <th>
                    Content
                </th>
                <th>
                    Diagram URL
                </th>
                <th>
                    User Actions
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Model.steps.Count > 0)
            {
                foreach (var item in Model.steps)
                {
                    <tr>
                        <td>
                            @item.Number
                        </td>
                        <td>
                            @Html.DisplayWithBreaksFor(model => @item.Content)
                        </td>
                        <td>
                            @item.DiagramURL
                        </td>
                        <td>
                            @Html.RouteLink("Edit", new
                            {
                                controller = "Step",
                                action = "Edit",
                                id = item.StepID
                            })|
                            @Html.RouteLink("Delete", new
                            {
                                controller = "Step",
                                action = "Delete",
                                id = item.StepID
                            })|

                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <p>
        @Html.RouteLink("Add new steps", new
        {
            controller = "Step",
            action = "Create",
            id = Model.ProcedureID,
        })
    </p>
</fieldset>


@*KEY POINTS*@
<fieldset>
    <legend>Key Points</legend>
    <table class="table" id="keyPointsTable">
        <thead>
            <tr>
                <th>
                    Paragraph
                </th>
                <th>
                    Header
                </th>
                <th>
                    Description
                </th>
                <th>
                    Diagram URL
                </th>
                <th>
                    User Actions
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Model.keypoints.Count > 0)
            {
                foreach (var item in Model.keypoints)
                {
                    <tr>
                        <td>
                            @item.Number
                        </td>
                        <td>
                            @item.Header
                        </td>
                        <td>
                            @Html.DisplayWithBreaksFor(model => @item.Description)
                        </td>
                        <td>
                            @item.DiagramURL
                        </td>
                        <td>
                            @Html.RouteLink("Edit", new
                            {
                                controller = "KeyPoint",
                                action = "Edit",
                                id = item.KeyPointID
                            })|
                            @Html.RouteLink("Delete", new
                            {
                                controller = "KeyPoint",
                                action = "Delete",
                                id = item.KeyPointID
                            })|

                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <p>
        @Html.RouteLink("Add new key points", new
        {
            controller = "KeyPoint",
            action = "Create",
            id = Model.ProcedureID
        })
    </p>
</fieldset>

@*VARIATIONS*@
<fieldset>
    <legend>Variations</legend>
    <table class="table" id="variationsTable">
        <thead>
            <tr>
                <th>
                    Paragraph
                </th>
                <th>
                    Header
                </th>
                <th>
                    Content
                </th>
                <th>
                    User Actions
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Model.variations.Count > 0)
            {
                foreach (var item in Model.variations)
                {
                    <tr>
                        <td>
                            @item.Number
                        </td>
                        <td>
                            @item.Header
                        </td>
                        <td>
                            @Html.DisplayWithBreaksFor(model => @item.SubHeader)
                        </td>
                        <td>
                            @Html.RouteLink("Edit", new
                            {
                                controller = "Variation",
                                action = "Edit",
                                id = item.VariationID
                            })|
                            @Html.RouteLink("Delete", new
                            {
                                controller = "Variation",
                                action = "Delete",
                                id = item.VariationID
                            })|

                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <p>
        @Html.RouteLink("Add new variations", new
        {
            controller = "Variation",
            action = "Create",
            id = Model.ProcedureID
        })
    </p>
</fieldset>

@*COMPLICATIONS*@
<fieldset>
    <legend>Complications</legend>
    <table class="table" id="complicationsTable">
        <thead>
            <tr>
                <th>
                    Number
                </th>
                <th>
                    Name
                </th>
                <th>
                    Diagram URL
                </th>
                <th>
                    User Actions
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Model.complications.Count > 0)
            {
                foreach (var item in Model.complications)
                {
                    <tr>
                        <td>
                            @item.Number
                        </td>
                        <td>
                            @item.Name
                        </td>
                        <td>
                            @item.DiagramURL
                        </td>
                        <td>
                            @Html.RouteLink("Edit", new
                            {
                                controller = "Complication",
                                action = "Edit",
                                id = item.ComplicationID
                            })|
                            @Html.RouteLink("Delete", new
                            {
                                controller = "Complication",
                                action = "Delete",
                                id = item.ComplicationID
                            })|

                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <p>
        @Html.RouteLink("Add new complications", new
        {
            controller = "Complication",
            action = "Create",
            id = Model.ProcedureID
        })
    </p>
</fieldset>

@*HISTORY*@
<fieldset>
    <legend>History</legend>
    <table class="table" id="historyTable">
        <thead>
            <tr>
                <th>
                    Paragraph
                </th>
                <th>
                    Content
                </th>
                <th>
                    User Actions
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Model.histories.Count > 0)
            {
                foreach (var item in Model.histories)
                {
                    <tr>
                        <td>
                            @item.Number
                        </td>
                        <td>
                            @Html.Raw(@item.Content)
                        </td>
                        <td>
                            @Html.RouteLink("Edit", new
                            {
                                controller = "History",
                                action = "Edit",
                                id = item.HistoryID
                            })|
                            @Html.RouteLink("Delete", new
                            {
                                controller = "History",
                                action = "Delete",
                                id = item.HistoryID
                            })|

                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <p>
        @Html.RouteLink("Add new history", new
        {
            controller = "History",
            action = "Create",
            id = Model.ProcedureID
        })
    </p>
</fieldset>

@*REFERENCES*@
<fieldset>
    <legend>References</legend>
    <table class="table" id="referencesTable">
        <thead>
            <tr>
                <th>
                    Number
                </th>
                <th>
                    Content
                </th>
                <th>
                    User Actions
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Model.references.Count > 0)
            {
                foreach (var item in Model.references)
                {
                    <tr>
                        <td>
                            @item.Number
                        </td>
                        <td>
                            @Html.Raw(@item.Content)
                        </td>
                        <td>
                            @Html.RouteLink("Edit", new
                            {
                                controller = "Reference",
                                action = "Edit",
                                id = item.ReferenceID
                            })|
                            @Html.RouteLink("Delete", new
                            {
                                controller = "Reference",
                                action = "Delete",
                                id = item.ReferenceID
                            })|

                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <p>
        @Html.RouteLink("Add new references", new
        {
            controller = "Reference",
            action = "Create",
            id = Model.ProcedureID
        })
    </p>
</fieldset>

@section Scripts {
    <script>
        // The following script uses AJAX calls along with the DataTable Extensions to update and reorder rows.
        $(document).ready(function () {
            var validationToken = $('input[name=__RequestVerificationToken]').val();
            // Convert all exisiting tables into DataTable
            var stepsTable = $('#stepsTable').DataTable({
                paging: false,
                rowReorder: true,
                // Load JSON data behind table. We will use this json data to update the actual table.
                ajax: CommonAjaxCall("GET", "@Url.Action("IndexJson","Step", new { id = Model.ProcedureID })", onSuccessSteps)
            });
            var keyPointsTable = $('#keyPointsTable').DataTable({
                paging: false,
                rowReorder: true,
                // Load JSON data behind table. We will use this json data to update the actual table.
                ajax: CommonAjaxCall("GET", "@Url.Action("IndexJson","KeyPoint", new { id = Model.ProcedureID })", onSuccessKeyPoints)
            });
            var variationsTable = $('#variationsTable').DataTable({
                paging: false,
                rowReorder: true,
                // Load JSON data behind table. We will use this json data to update the actual table.
                ajax: CommonAjaxCall("GET", "@Url.Action("IndexJson","Variation", new { id = Model.ProcedureID })", onSuccessVariations)
            });
            var complicationsTable = $('#complicationsTable').DataTable({
                paging: false,
                rowReorder: true,
                // Load JSON data behind table. We will use this json data to update the actual table.
                ajax: CommonAjaxCall("GET", "@Url.Action("IndexJson","Complication", new { id = Model.ProcedureID })", onSuccessComplications)
            });
            var historyTable = $('#historyTable').DataTable({
                paging: false,
                rowReorder: true,
                // Load JSON data behind table. We will use this json data to update the actual table.
                ajax: CommonAjaxCall("GET", "@Url.Action("IndexJson","History", new { id = Model.ProcedureID })", onSuccessHistory)
            });
            var referencesTable = $('#referencesTable').DataTable({
                paging: false,
                rowReorder: true,
                // Load JSON data behind table. We will use this json data to update the actual table.
                ajax: CommonAjaxCall("GET", "@Url.Action("IndexJson","Reference", new { id = Model.ProcedureID })", onSuccessReferences)
            });

            // Common Ajax Call to get all data from server for each table
            function CommonAjaxCall(type, url, successCallback) {
                $.ajax({
                    type: type,
                    url: url,
                    dataType: 'json', // DataType is used when getting info from server
                    success: function (data) {
                        successCallback(data);
                    },
                });
            }
            // Common Ajax Call for updating rows in each table
            function UpdateRowAjaxCall(type, url, token, data, recallFunction) {
                $.ajax({
                    type: type,
                    url: url,
                    data: data,
                    contentType: 'application/json; charset=utf-8', // ContentType is used when posting info to the server
                    headers: { '__RequestVerificationToken': token },
                    // Pass new data to call back functions
                    success: function (result) {
                        recallFunction(result)
                    },
                });
            }
            // STEPS
            var newStepData;
            function onSuccessSteps(data) {
                newStepData = {};
                newStepData.steps = data;
                if ($('#stepsTable').hide()) {
                    $('#stepsTable').show();
                }
            }
            stepsTable.on('row-reorder', function (e, detail, edit) {
                var changes = {};
                for (var i = 0, ien = detail.length; i < ien; i++) {
                    changes[detail[i].oldData] = detail[i].newData;
                }
                newStepData.updates = changes;
                UpdateRowAjaxCall("POST", "@Url.Action("EditSequence","Step")", validationToken, JSON.stringify(newStepData), onSuccessSteps);
                $('#stepsTable').hide();
            });
            // KEY POINTS
            var newKeyPointData;
            function onSuccessKeyPoints(data) {
                newKeyPointData = {};
                newKeyPointData.keypoints = data;
                if ($('#keyPointsTable').hide()) {
                    $('#keyPointsTable').show();
                }
            }
            keyPointsTable.on('row-reorder', function (e, detail, edit) {
                var changes = {};
                for (var i = 0, ien = detail.length; i < ien; i++) {
                    changes[detail[i].oldData] = detail[i].newData;
                }
                newKeyPointData.updates = changes;
                UpdateRowAjaxCall("POST", "@Url.Action("EditSequence","KeyPoint")", validationToken, JSON.stringify(newKeyPointData), onSuccessKeyPoints);
                $('#keyPointsTable').hide();
            });
            // VARIATIONS
            var newVariationData;
            function onSuccessVariations(data) {
                newVariationData = {};
                newVariationData.variations = data;
                if ($('#variationsTable').hide()) {
                    $('#variationsTable').show();
                }
            }
            variationsTable.on('row-reorder', function (e, detail, edit) {
                var changes = {};
                for (var i = 0, ien = detail.length; i < ien; i++) {
                    changes[detail[i].oldData] = detail[i].newData;
                }
                newVariationData.updates = changes;
                UpdateRowAjaxCall("POST", "@Url.Action("EditSequence","Variation")", validationToken, JSON.stringify(newVariationData), onSuccessVariations);
                $('#variationsTable').hide();
            });
            // COMPLICATIONS
            var newComplicationData;
            function onSuccessComplications(data) {
                newComplicationData = {};
                newComplicationData.complications = data;
                if ($('#complicationsTable').hide()) {
                    $('#complicationsTable').show();
                }
            }
            complicationsTable.on('row-reorder', function (e, detail, edit) {
                var changes = {};
                for (var i = 0, ien = detail.length; i < ien; i++) {
                    changes[detail[i].oldData] = detail[i].newData;
                }
                newComplicationData.updates = changes;
                UpdateRowAjaxCall("POST", "@Url.Action("EditSequence","Complication")", validationToken, JSON.stringify(newComplicationData), onSuccessComplications);
                $('#complicationsTable').hide();
            });
            // HISTORY
            var newHistoryData;
            function onSuccessHistory(data) {
                newHistoryData = {};
                newHistoryData.history = data;
                if ($('#historyTable').hide()) {
                    $('#historyTable').show();
                }
            }
            historyTable.on('row-reorder', function (e, detail, edit) {
                var changes = {};
                for (var i = 0, ien = detail.length; i < ien; i++) {
                    changes[detail[i].oldData] = detail[i].newData;
                }
                newHistoryData.updates = changes;
                UpdateRowAjaxCall("POST", "@Url.Action("EditSequence","History")", validationToken, JSON.stringify(newHistoryData), onSuccessHistory);
                $('#historyTable').hide();
            });
            // REFERENCES
            var newReferencesData;
            function onSuccessReferences(data) {
                newReferencesData = {};
                newReferencesData.references = data;
                if ($('#referencesTable').hide()) {
                    $('#referencesTable').show();
                }
            }
            referencesTable.on('row-reorder', function (e, detail, edit) {
                var changes = {};
                for (var i = 0, ien = detail.length; i < ien; i++) {
                    changes[detail[i].oldData] = detail[i].newData;
                }
                newReferencesData.updates = changes;
                UpdateRowAjaxCall("POST", "@Url.Action("EditSequence","Reference")", validationToken, JSON.stringify(newReferencesData), onSuccessReferences);
                $('#referencesTable').hide();
            });
        })
    </script>
}
